#!/usr/bin/env python

import pika
import time

amqp_host     = 'amqp.hacklab'
amqp_exchange = 'events'

connection = pika.BlockingConnection(pika.ConnectionParameters(host=amqp_host))
channel = connection.channel()
channel.exchange_declare(exchange="events", type="topic")

result = channel.queue_declare(exclusive=True)
queue_name = result.method.queue

channel.queue_bind(exchange=amqp_exchange, queue=queue_name, routing_key='#')

def say(text):
    channel.basic_publish(exchange=amqp_exchange,
                          routing_key='actions.speak',
                          body='',
                          properties=pika.BasicProperties(
                            timestamp=time.time(),
                            headers={"data": text})
                          )

def play(filename):
    channel.basic_publish(exchange=amqp_exchange,
                          routing_key='actions.play_sound',
                          body='',
                          properties=pika.BasicProperties(
                            timestamp=time.time(),
                            headers={"filename": filename})
                          )

def process(topic, timestamp, headers, body):
    print topic, timestamp, headers, body
    if topic == 'sensors.openswitch' and headers['status'] == 'open':
        say("Status set to open")
    elif topic == 'sensors.openswitch' and headers['status'] == 'closed':
        say("Status set to closed")
    elif topic == 'sensors.pir_triggered':
        #play('computerbeep_4.mp3')
        pass

def callback(ch, method, properties, body):
    try:
        process(method.routing_key, properties.timestamp, properties.headers, body)
    except Exception, e:
        print e

channel.basic_consume(callback,
                      queue=queue_name,
                      no_ack=True)

channel.start_consuming()
