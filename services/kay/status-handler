#!/usr/bin/env python

import sys
sys.path.insert(0, "/srv/hacksense/lib")

import hacksense
import logging
import time
import urllib
import urllib2

hacksense.setup_logging(redirect=True)

open_secret = hacksense.config.get("open_secret", "")
closed_secret = hacksense.config.get("closed_secret", "")
status_timeout = 7200

#global stored_status
#stored_status = (0, 'closed')

def push_status_to_server(status):
    if status == 'open':
        values = {'k': open_secret}
        data = urllib.urlencode(values)
        req = urllib2.Request('http://www.edinburghhacklab.com/internal/occupancy.php', data)
        if urllib2.urlopen(req).read() == 'DONE':
            return True
        else:
            return False
    elif status == 'closed':
        values = {'k': closed_secret}
        data = urllib.urlencode(values)
        req = urllib2.Request('http://www.edinburghhacklab.com/internal/occupancy.php', data)
        if urllib2.urlopen(req).read() == 'DONE':
            return True
        else:
            return False

def lcd(line1, line2=""):
    conn.publish("doorbot.lcd.display", {"line1": line1, "line2": line2})

def say(text):
    conn.publish("actions.speak", {"data": text})

def callback(ch, method, properties, body):
    global rconn

    topic = method.routing_key
    timestamp = properties.timestamp
    headers = properties.headers

    logging.info("%s %s %r" % (timestamp, topic, headers))

    current_status_timestamp = float(rconn.get('hacksense:labstatus:timestamp') or 0)
    current_status = rconn.get('hacksense:labstatus:status')
    current_status_age = time.time()-current_status_timestamp

    logging.info("Current status: %s %s" % (current_status_timestamp, current_status))
    logging.info("Current status age: %s" % (current_status_age))

    if topic == "doorbot.lcd.start":
        # lcd has started, send the current status
        time.sleep(1)
        if current_status == "open":
            lcd("Status: Open")
        elif current_status == "closed":
            lcd("Status: Closed")
        else:
            lcd("Status: Unknown")
        return

    if time.time()-timestamp > 10:
        logging.warning("Ignoring delayed button message")
        return

    if topic in ['doorbot.buttons.green.longpress']:
        new_status = 'open'
        press = 'long'
    elif topic in ['doorbot.buttons.red.longpress']:
        new_status = 'closed'
        press = 'long'
    else:
        return
        
    if new_status == 'open':
        rconn.set('hacksense:labstatus:timestamp', time.time())
        rconn.set('hacksense:labstatus:status', 'open')
        logging.info("opening...")
        lcd("Opening...")
        if push_status_to_server('open'):
            logging.info("set to open")
            lcd("Status: Open")
            say("Status set to open")
        else:
            logging.info("set to open, tweet failed")
            lcd("Status: Open", "Tweet failed")
            say("Sorry, I couldn't reach twitter")

    elif new_status == 'closed':
        rconn.set('hacksense:labstatus:timestamp', time.time())
        rconn.set('hacksense:labstatus:status', 'closed')
        logging.info("closing...")
        lcd("Closing...")
        if push_status_to_server('closed'):
            logging.info("set to closed")
            lcd("Status: Closed")
            say("Status set to closed")
        else:
            logging.info("set to closed, tweet failed")
            lcd("Status: Closed", "Tweet failed")
            say("Sorry, I couldn't reach twitter")

rconn = hacksense.RedisConnection().redis
conn = hacksense.AMQPTopic()
conn.subscribe_callback(["doorbot.lcd.start", "doorbot.buttons.#"], callback)
