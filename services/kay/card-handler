#!/usr/bin/env python

import sys
sys.path.insert(0, "/srv/hacksense/lib")

import hacksense
import logging
import time
import ConfigParser

hacksense.setup_logging(redirect=True)
logging.basicConfig()
logging.getLogger().setLevel(logging.INFO)

irc_channel = '##edinhacklabtest'

config = ConfigParser.SafeConfigParser()
config.read("/srv/hacksense/etc/people.conf")

uids = {}

for section in config.sections():
    if config.has_option(section, "cards"):
        for uid in config.get(section, "cards").strip().split():
            uids[uid] = []
            if config.has_option(section, "greeting"):
                uids[uid].append(("actions.speak",
                                  {"data": config.get(section, "greeting").strip()},
                                  ""))
            if config.has_option(section, "irc_nick"):
                uids[uid].append(("irc.send",
                                  {"channel": irc_channel,
                                   "data": "%s checked-in at the lab." % (config.get(section, "irc_nick".strip()))},
                                  ""))

def callback(ch, method, properties, body):
    global conn

    topic = method.routing_key
    timestamp = properties.timestamp
    headers = properties.headers

    logging.info("%s %s %r" % (timestamp, topic, headers))

    uid = headers.get('uid')
    if uid:
        logging.info("uid %s" % (uid))
    else:
        return

    actions = uids.get(uid)
    
    if actions is not None:
        logging.info("actions found for uid %s" % (uid))
        for action in actions:
            logging.info(repr(action))
            conn.publish(action[0], action[1], action[2])

conn = hacksense.AMQPTopic()
conn.subscribe_callback("doorbot.card.swipe", callback)
