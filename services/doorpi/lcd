#!/usr/bin/env python
#
# Based on example code from http://www.raspberrypi-spy.co.uk/2012/07/16x2-lcd-module-control-using-python/

import sys
sys.path.insert(0, "/srv/hacksense/lib")

import hacksense
import RPi.GPIO as GPIO
import time

# Define GPIO to LCD mapping
# (these are the PINs on Hacklab's Doorbot protoshield)
LCD_RS = 4
LCD_E  = 25
LCD_D4 = 24 
LCD_D5 = 23
LCD_D6 = 22
LCD_D7 = 27

# Define some device constants
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False

LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line 

# Timing constants
E_PULSE = 0.00005
E_DELAY = 0.00005

class LCD(object):
  
    def __init__(self):
        GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
        GPIO.setup(LCD_E, GPIO.OUT)  # E
        GPIO.setup(LCD_RS, GPIO.OUT) # RS
        GPIO.setup(LCD_D4, GPIO.OUT) # DB4
        GPIO.setup(LCD_D5, GPIO.OUT) # DB5
        GPIO.setup(LCD_D6, GPIO.OUT) # DB6
        GPIO.setup(LCD_D7, GPIO.OUT) # DB7

        self.current_lines = ("", "")
        
        # Initialise display
        self.lcd_init()
        self.lines("Hello!")
        
    def lcd_init(self):
        # Initialise display
        self.lcd_byte(0x33,LCD_CMD)
        self.lcd_byte(0x32,LCD_CMD)
        self.lcd_byte(0x28,LCD_CMD)
        self.lcd_byte(0x0C,LCD_CMD)  
        self.lcd_byte(0x06,LCD_CMD)
        self.lcd_byte(0x01,LCD_CMD)  

    def lcd_string(self, message):
        # Send string to display
        message = message.ljust(LCD_WIDTH," ")  
        for i in range(LCD_WIDTH):
            self.lcd_byte(ord(message[i]),LCD_CHR)
            
    def lcd_byte(self, bits, mode):
        # Send byte to data pins
        # bits = data
        # mode = True  for character
        #        False for command
        
        GPIO.output(LCD_RS, mode) # RS
        
        # High bits
        GPIO.output(LCD_D4, False)
        GPIO.output(LCD_D5, False)
        GPIO.output(LCD_D6, False)
        GPIO.output(LCD_D7, False)
        if bits&0x10==0x10:
            GPIO.output(LCD_D4, True)
        if bits&0x20==0x20:
            GPIO.output(LCD_D5, True)
        if bits&0x40==0x40:
            GPIO.output(LCD_D6, True)
        if bits&0x80==0x80:
            GPIO.output(LCD_D7, True)
            
        # Toggle 'Enable' pin
        time.sleep(E_DELAY)    
        GPIO.output(LCD_E, True)  
        time.sleep(E_PULSE)
        GPIO.output(LCD_E, False)  
        time.sleep(E_DELAY)      
        
        # Low bits
        GPIO.output(LCD_D4, False)
        GPIO.output(LCD_D5, False)
        GPIO.output(LCD_D6, False)
        GPIO.output(LCD_D7, False)
        if bits&0x01==0x01:
            GPIO.output(LCD_D4, True)
        if bits&0x02==0x02:
            GPIO.output(LCD_D5, True)
        if bits&0x04==0x04:
            GPIO.output(LCD_D6, True)
        if bits&0x08==0x08:
            GPIO.output(LCD_D7, True)
            
        # Toggle 'Enable' pin
        time.sleep(E_DELAY)    
        GPIO.output(LCD_E, True)  
        time.sleep(E_PULSE)
        GPIO.output(LCD_E, False)  
        time.sleep(E_DELAY)   

    def lines(self, line1, line2=""):
        self.last_lines = self.current_lines
        self.current_lines = (line1, line2)
        print "displaying %r" % (self.current_lines,)
        self.lcd_byte(LCD_LINE_1, LCD_CMD)
        self.lcd_string(self.current_lines[0])
        self.lcd_byte(LCD_LINE_2, LCD_CMD)
        self.lcd_string(self.current_lines[1])

    def undo(self):
        self.current_lines = self.last_lines
        print "displaying %r" % (self.current_lines,)
        self.lcd_byte(LCD_LINE_1, LCD_CMD)
        self.lcd_string(self.current_lines[0])
        self.lcd_byte(LCD_LINE_2, LCD_CMD)
        self.lcd_string(self.current_lines[1])

def callback(ch, method, properties, body):
    global lcd
    topic = method.routing_key
    headers = properties.headers
    if topic == "doorbot.lcd.display":
        lcd.lines(headers.get("line1", ""), headers.get("line2", ""))
        if headers.has_key("flash"):
            try:
                time.sleep(float(headers["flash"]))
            except ValueError:
                time.sleep(2)
            lcd.undo()
        if headers.has_key("pause"):
            try:
                time.sleep(float(headers["pause"]))
            except ValueError:
                pass

lcd = LCD()
conn = hacksense.AMQPTopic()
conn.subscribe_callback("doorbot.lcd.#", callback)
