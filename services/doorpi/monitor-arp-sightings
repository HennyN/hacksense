#!/usr/bin/env python

import sys
sys.path.insert(0, "/srv/hacksense/lib")

import hacksense
import threading
import time
from scapy.all import *

hacksense.setup_logging(redirect=True)
logging.getLogger().setLevel(logging.DEBUG)
conn = hacksense.AMQPTopic()

cache_timeout = 60
query_interval = 1
networks = ['10.38.38']

seen = {}

class MessageThread(threading.Thread):
    def run(self):
        while True:
            for n in networks:
                for i in xrange(1, 255):
                    ip = "%s.%d" % (n, i)
                    pkt = Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ip)
                    sendp(pkt, verbose=False)
                    time.sleep(query_interval)

def sniff_callback(pkt):
    if ARP in pkt and pkt[ARP].op in (1,2): #who-has or is-at
        mac = pkt.sprintf("%ARP.hwsrc%")
        ip = pkt.sprintf("%ARP.psrc%")
        if mac == "00:00:00:00:00:00":
            return
        if seen.has_key(ip):
            oldmac, timestamp = seen[ip]
            if oldmac == mac and time.time()-timestamp < cache_timeout:
                return
        seen[ip] = (mac, time.time())
        conn.publish("network.arp-sighting", {"ip": ip, "mac": mac}, "")

messagethread = MessageThread()
messagethread.daemon = True
messagethread.start()

sniff(prn=sniff_callback, filter="arp", store=0)
