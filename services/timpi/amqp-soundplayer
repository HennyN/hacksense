#!/usr/bin/env python

import os
import pika
import signal
import subprocess

amqp_host     = 'amqp.hacklab'
amqp_exchange = 'events'
amqp_topic    = 'actions.play_sound'
basedir       = '/usr/local/sounds'
max_playtime  = 15

connection = pika.BlockingConnection(pika.ConnectionParameters(host=amqp_host))
channel = connection.channel()
channel.exchange_declare(exchange="events", type="topic")

result = channel.queue_declare(exclusive=True)
queue_name = result.method.queue

channel.queue_bind(exchange=amqp_exchange, queue=queue_name, routing_key=amqp_topic)

print "Waiting for request..."

# runs a command and terminates it after a specified timeout
def call_with_timeout(command, timeout):
    class TimeoutException(Exception):
        pass
    def alrm_handler(signum, frame):
        raise TimeoutException()
    try:
        old_handler = signal.signal(signal.SIGALRM, alrm_handler)
        signal.alarm(timeout)
        p = subprocess.Popen(command)
        retcode = p.wait()
    except TimeoutException:
        p.terminate()
        retcode = p.wait()
    finally:
        signal.signal(signal.SIGALRM, old_handler)
    signal.alarm(0)
    return retcode

def play(filename):
    base, ext = os.path.splitext(filename)
    if ext == '.mp3':
        command = ['mpg123', filename]
        call_with_timeout(command, timeout=max_playtime)
    else:
        command = ['play', filename]
        call_with_timeout(command, timeout=max_playtime)

def callback(ch, method, properties, body):
    print " [x] %r:%r" % (method.routing_key, body,)
    print ch, method, properties.timestamp, properties.headers, body
    if properties.headers.has_key('filename'):
        try:
            filename = os.path.join(basedir, os.path.basename(properties.headers['filename']))
            if os.path.isfile(filename):
                play(filename)
            else:
                raise Exception('File %s not found' % (filename))
        except Exception, e:
            print e

channel.basic_consume(callback,
                      queue=queue_name,
                      no_ack=True)

channel.start_consuming()
